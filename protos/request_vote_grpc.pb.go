// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package vote

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RequestVoteClient is the client API for RequestVote service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RequestVoteClient interface {
	GetVote(ctx context.Context, in *RequestVoteDetail, opts ...grpc.CallOption) (*RequestVoteResponse, error)
}

type requestVoteClient struct {
	cc grpc.ClientConnInterface
}

func NewRequestVoteClient(cc grpc.ClientConnInterface) RequestVoteClient {
	return &requestVoteClient{cc}
}

func (c *requestVoteClient) GetVote(ctx context.Context, in *RequestVoteDetail, opts ...grpc.CallOption) (*RequestVoteResponse, error) {
	out := new(RequestVoteResponse)
	err := c.cc.Invoke(ctx, "/RequestVote/GetVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RequestVoteServer is the server API for RequestVote service.
// All implementations must embed UnimplementedRequestVoteServer
// for forward compatibility
type RequestVoteServer interface {
	GetVote(context.Context, *RequestVoteDetail) (*RequestVoteResponse, error)
	mustEmbedUnimplementedRequestVoteServer()
}

// UnimplementedRequestVoteServer must be embedded to have forward compatible implementations.
type UnimplementedRequestVoteServer struct {
}

func (UnimplementedRequestVoteServer) GetVote(context.Context, *RequestVoteDetail) (*RequestVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVote not implemented")
}
func (UnimplementedRequestVoteServer) mustEmbedUnimplementedRequestVoteServer() {}

// UnsafeRequestVoteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RequestVoteServer will
// result in compilation errors.
type UnsafeRequestVoteServer interface {
	mustEmbedUnimplementedRequestVoteServer()
}

func RegisterRequestVoteServer(s grpc.ServiceRegistrar, srv RequestVoteServer) {
	s.RegisterService(&RequestVote_ServiceDesc, srv)
}

func _RequestVote_GetVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestVoteServer).GetVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RequestVote/GetVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestVoteServer).GetVote(ctx, req.(*RequestVoteDetail))
	}
	return interceptor(ctx, in, info, handler)
}

// RequestVote_ServiceDesc is the grpc.ServiceDesc for RequestVote service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RequestVote_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RequestVote",
	HandlerType: (*RequestVoteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVote",
			Handler:    _RequestVote_GetVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "request_vote.proto",
}
